// Generated by Dagger (https://dagger.dev).
package com.sammy.forecast_presentation.ui;

import com.sammy.forecast_domain.use_case.GetUseCases;
import com.sammy.forecast_presentation.utils.LocationUtils;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WeatherForecastViewModel_Factory implements Factory<WeatherForecastViewModel> {
  private final Provider<GetUseCases> useCasesProvider;

  private final Provider<LocationUtils> locationUtilsProvider;

  public WeatherForecastViewModel_Factory(Provider<GetUseCases> useCasesProvider,
      Provider<LocationUtils> locationUtilsProvider) {
    this.useCasesProvider = useCasesProvider;
    this.locationUtilsProvider = locationUtilsProvider;
  }

  @Override
  public WeatherForecastViewModel get() {
    return newInstance(useCasesProvider.get(), locationUtilsProvider.get());
  }

  public static WeatherForecastViewModel_Factory create(Provider<GetUseCases> useCasesProvider,
      Provider<LocationUtils> locationUtilsProvider) {
    return new WeatherForecastViewModel_Factory(useCasesProvider, locationUtilsProvider);
  }

  public static WeatherForecastViewModel newInstance(GetUseCases useCases,
      LocationUtils locationUtils) {
    return new WeatherForecastViewModel(useCases, locationUtils);
  }
}
