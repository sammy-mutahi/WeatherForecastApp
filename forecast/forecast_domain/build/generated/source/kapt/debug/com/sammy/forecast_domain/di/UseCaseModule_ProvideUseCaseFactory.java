// Generated by Dagger (https://dagger.dev).
package com.sammy.forecast_domain.di;

import com.sammy.forecast_domain.repository.WeatherRepository;
import com.sammy.forecast_domain.use_case.GetUseCases;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UseCaseModule_ProvideUseCaseFactory implements Factory<GetUseCases> {
  private final Provider<WeatherRepository> weatherRepositoryProvider;

  public UseCaseModule_ProvideUseCaseFactory(
      Provider<WeatherRepository> weatherRepositoryProvider) {
    this.weatherRepositoryProvider = weatherRepositoryProvider;
  }

  @Override
  public GetUseCases get() {
    return provideUseCase(weatherRepositoryProvider.get());
  }

  public static UseCaseModule_ProvideUseCaseFactory create(
      Provider<WeatherRepository> weatherRepositoryProvider) {
    return new UseCaseModule_ProvideUseCaseFactory(weatherRepositoryProvider);
  }

  public static GetUseCases provideUseCase(WeatherRepository weatherRepository) {
    return Preconditions.checkNotNullFromProvides(UseCaseModule.INSTANCE.provideUseCase(weatherRepository));
  }
}
