// Generated by Dagger (https://dagger.dev).
package com.sammy.forecast_data.di;

import com.sammy.forecast_data.data.network.ApiService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideApiServiceFactory implements Factory<ApiService> {
  private final Provider<OkHttpClient> clientProvider;

  public NetworkModule_ProvideApiServiceFactory(Provider<OkHttpClient> clientProvider) {
    this.clientProvider = clientProvider;
  }

  @Override
  public ApiService get() {
    return provideApiService(clientProvider.get());
  }

  public static NetworkModule_ProvideApiServiceFactory create(
      Provider<OkHttpClient> clientProvider) {
    return new NetworkModule_ProvideApiServiceFactory(clientProvider);
  }

  public static ApiService provideApiService(OkHttpClient client) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.provideApiService(client));
  }
}
