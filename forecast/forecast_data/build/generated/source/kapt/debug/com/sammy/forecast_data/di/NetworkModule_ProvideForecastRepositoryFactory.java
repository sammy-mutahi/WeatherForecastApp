// Generated by Dagger (https://dagger.dev).
package com.sammy.forecast_data.di;

import com.sammy.forecast_data.data.network.ApiService;
import com.sammy.forecast_domain.repository.WeatherRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideForecastRepositoryFactory implements Factory<WeatherRepository> {
  private final Provider<ApiService> apiServiceProvider;

  public NetworkModule_ProvideForecastRepositoryFactory(Provider<ApiService> apiServiceProvider) {
    this.apiServiceProvider = apiServiceProvider;
  }

  @Override
  public WeatherRepository get() {
    return provideForecastRepository(apiServiceProvider.get());
  }

  public static NetworkModule_ProvideForecastRepositoryFactory create(
      Provider<ApiService> apiServiceProvider) {
    return new NetworkModule_ProvideForecastRepositoryFactory(apiServiceProvider);
  }

  public static WeatherRepository provideForecastRepository(ApiService apiService) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.provideForecastRepository(apiService));
  }
}
